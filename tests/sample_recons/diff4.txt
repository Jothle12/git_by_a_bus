diff --git a/git_by_a_bus/git_by_a_bus.py b/git_by_a_bus/git_by_a_bus.py
index 628e890..b5d2f35 100644
--- a/git_by_a_bus/git_by_a_bus.py
+++ b/git_by_a_bus/git_by_a_bus.py
@@ -18,103 +18,71 @@ def read_projects_file(fname, paths_projects):
     except IOError:
         return False
 
-def run_gen_file_stats(python_cmd, output_dir):
-    output_fname = os.path.join(output_dir, '__file_stats.txt')
-    output_fil = open(output_fname, 'w')
-    
-    for path_project in paths_projects:
-        cmd_t = Template('${python_cmd} gen_file_stats.py ${path_project}')
-        cmd = cmd_t.substitute(python_cmd=python_cmd, path_project=path_project).split(' ')
-        cmd_p = Popen(cmd, stdout=output_fil)
-        cmd_p.communicate()
-
-    output_fil.close()
-
-    return output_fname
-
-def run_calc_file_knowledge_totals(python_cmd, output_dir, file_stats_fname):
-    output_fname = os.path.join(output_dir, '__file_knowledge_totals.txt')
-    output_fil = open(output_fname, 'w')
-
-    input_fil = open(file_stats_fname, 'r')
-    
-    cmd_t = Template('${python_cmd} calc_file_knowledge_totals.py')
-    cmd = cmd_t.substitute(python_cmd=python_cmd).split(' ')
-    cmd_p = Popen(cmd, stdout=output_fil, stdin=input_fil)
-    cmd_p.communicate()
-
-    output_fil.close()
-    input_fil.close()
-
-    return output_fname
-
-def run_estimate_unique_knowledge(python_cmd, output_dir, file_knowlegde_fname, departed_dev_file):
-    output_fname = os.path.join(output_dir, '__unique_knowledge.txt')
-    output_fil = open(output_fname, 'w')
-
-    input_fil = open(file_knowlegde_fname, 'r')
-    
-    departed_dev_option = ''
-    if departed_dev_file:
-        departed_dev_option = '-d %s' % departed_dev_file
-    
-    cmd_t = Template('${python_cmd} estimate_unique_knowledge.py ${departed_dev_option}')
-    cmd = cmd_t.substitute(python_cmd=python_cmd, departed_dev_option=departed_dev_option).split(' ')
-    cmd_p = Popen(cmd, stdout=output_fil, stdin=input_fil)
-    cmd_p.communicate()
+def run_chained(cmd_ts, python_cmd, risk_file_option, bus_risk, departed_dev_option, output_dir):
+    last_output_fname = None
+    
+    for cmd_t in cmd_ts:
+        cmd_templates, output_fname = cmd_t
+        
+        output_f = None
+        if output_fname:
+            output_fname = os.path.join(output_dir, output_fname)
+            if os.path.isfile(output_fname):
+                last_output_fname = output_fname
+                continue
+            output_f = open(output_fname, 'w')
+
+        stdin_f = None
+        if last_output_fname:
+            stdin_f = open(last_output_fname, 'r')
+        
+        if not isinstance(cmd_templates, list):
+            cmd_templates = [cmd_templates]
+
+        last_output_fname = output_fname
+
+        for cmd_template in cmd_templates:
+            cmd = Template(cmd_template).substitute(python_cmd=python_cmd,
+                                                    risk_file_option=risk_file_option,
+                                                    bus_risk=bus_risk,
+                                                    departed_dev_option=departed_dev_option,
+                                                    output_dir=output_dir).split(' ')
+            cmd_p = Popen(cmd, stdin=stdin_f, stdout=output_f)
+            cmd_p.communicate()
+
+        if stdin_f:
+            stdin_f.close()
+        if output_f:
+            output_f.close()
 
-    output_fil.close()
-    input_fil.close()
-
-    return output_fname
-
-def run_estimate_file_risk(python_cmd, output_dir, unique_knowledge_fname, bus_risk, risk_file):
-    output_fname = os.path.join(output_dir, '__estimated_risk.txt')
-    output_fil = open(output_fname, 'w')
-
-    input_fil = open(unique_knowledge_fname, 'r')
-    
-    risk_file_option = ''
-    if risk_file:
-        risk_file_option = '-r %s' % risk_file
-    
-    cmd_t = Template('${python_cmd} estimate_file_risk.py -b ${bus_risk} ${risk_file_option}')
-    cmd = cmd_t.substitute(python_cmd=python_cmd,
-                           risk_file_option=risk_file_option,
-                           bus_risk=bus_risk).split(' ')
-    cmd_p = Popen(cmd, stdout=output_fil, stdin=input_fil)
-    cmd_p.communicate()
-
-    output_fil.close()
-    input_fil.close()
-
-    return output_fname
-
-def run_summarize(python_cmd, output_dir, estimated_risk_fname):
-    input_fil = open(estimated_risk_fname, 'r')
-    
-    cmd_t = Template('${python_cmd} summarize.py ${output_dir}')
-    cmd = cmd_t.substitute(python_cmd=python_cmd,
-                           output_dir=output_dir).split(' ')
-    cmd_p = Popen(cmd, stdin=input_fil)
-    cmd_p.communicate()
-
-    input_fil.close()
-    
 def main(paths_projects, options):
+    # values for command subs...
     python_cmd = '/usr/bin/env python'
-    
+
     output_dir = os.path.abspath(options.output or 'output')
     try:
         os.mkdir(output_dir)
     except:
-        exit_with_error("Could not create directory %s" % output_dir)
+        if not options.continue_last:
+            exit_with_error("Output directory exists and you have not specified -c")
 
-    file_stats_fname = run_gen_file_stats(python_cmd, output_dir)
-    file_knowlegde_fname = run_calc_file_knowledge_totals(python_cmd, output_dir, file_stats_fname)
-    unique_knowledge_fname = run_estimate_unique_knowledge(python_cmd, output_dir, file_knowlegde_fname, options.departed_dev_file)
-    estimated_risk_fname = run_estimate_file_risk(python_cmd, output_dir, unique_knowledge_fname, options.bus_risk, options.risk_file)
-    run_summarize(python_cmd, output_dir, estimated_risk_fname)
+    risk_file_option = ''
+    if options.risk_file:
+        risk_file_option = '-r %s' % options.risk_file
+
+    departed_dev_option = ''
+    if options.departed_dev_file:
+        departed_dev_option = '-d %s' % options.departed_dev_file
+
+    # commands to chain together
+    cmd_ts = []
+    cmd_ts.append((['${python_cmd} gen_file_stats.py %s' % path_project for path_project in paths_projects], '__file_stats.txt'))
+    cmd_ts.append(('${python_cmd} calc_file_knowledge_totals.py', '__file_knowledge_totals.txt'))
+    cmd_ts.append(('${python_cmd} estimate_unique_knowledge.py ${departed_dev_option}', '__unique_knowledge.txt'))
+    cmd_ts.append(('${python_cmd} estimate_file_risk.py -b ${bus_risk} ${risk_file_option}', '__estimated_risk.txt'))
+    cmd_ts.append(('${python_cmd} summarize.py ${output_dir}', None))
+
+    run_chained(cmd_ts, python_cmd, risk_file_option, options.bus_risk, departed_dev_option, output_dir)
     
 if __name__ == '__main__':
     usage = """usage: %prog [options] [git_controlled_path1[=project_name1], git_controlled_path2[=project_name2],...]
@@ -136,11 +104,13 @@ if __name__ == '__main__':
     parser.add_option('-d', '--departed-dev-file', dest='departed_dev_file', metavar='FILE',
                       help='File listing departed devs, one per line')
     parser.add_option('-o', '--output', dest='output', metavar='DIRNAME', default='output',
-                      help='Output directory for data files and html summary, error if already exists (defaults to "output")')
+                      help='Output directory for data files and html summary (defaults to "output"), error if already exists without -c')
     parser.add_option('-p', '--projects-file', dest='projects_file', metavar='FILE',
                       help='File of path[=project_name] lines, where path is an absoluate path to the git-controlled ' + \
                       'directory to analyze and project_name is the name to use in the output summary (project_name defaults to ' + \
                       'the last directory name in the path)')
+    parser.add_option('-c', '--continue-last', dest='continue_last', default=False, action="store_true",
+                      help="Continue last run, using existing output files and recreating missing.")
 
     options, paths_projects = parser.parse_args()
 

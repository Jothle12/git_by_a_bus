diff --git a/git_by_a_bus/git_by_a_bus.py b/git_by_a_bus/git_by_a_bus.py
index b5d2f35..1735eae 100644
--- a/git_by_a_bus/git_by_a_bus.py
+++ b/git_by_a_bus/git_by_a_bus.py
@@ -18,47 +18,49 @@ def read_projects_file(fname, paths_projects):
     except IOError:
         return False
 
-def run_chained(cmd_ts, python_cmd, risk_file_option, bus_risk, departed_dev_option, output_dir):
-    last_output_fname = None
-    
+def output_fname_for(pyfile, output_dir):
+    if not pyfile:
+        return None
+    return os.path.join(output_dir, os.path.splitext(pyfile)[0] + '.tsv')
+
+def run_chained(cmd_ts, python_cmd, output_dir, verbose):
     for cmd_t in cmd_ts:
-        cmd_templates, output_fname = cmd_t
+        input_pyfile = cmd_t[0]
+        output_pyfile = cmd_t[1]
         
-        output_f = None
-        if output_fname:
-            output_fname = os.path.join(output_dir, output_fname)
-            if os.path.isfile(output_fname):
-                last_output_fname = output_fname
-                continue
-            output_f = open(output_fname, 'w')
+        opts_args = ['']
+        if len(cmd_t) > 2:
+            opts_args = cmd_t[2]
 
-        stdin_f = None
-        if last_output_fname:
-            stdin_f = open(last_output_fname, 'r')
-        
-        if not isinstance(cmd_templates, list):
-            cmd_templates = [cmd_templates]
+        input_fname = output_fname_for(input_pyfile, output_dir)
+        output_fname = output_fname_for(output_pyfile, output_dir)
+
+        # don't re-run if the results exist
+        if os.path.isfile(output_fname):
+            if verbose:
+                print >> sys.stderr, "%s EXISTS, SKIPPING" % output_fname
+            continue
 
-        last_output_fname = output_fname
+        input_f = None
+        if input_fname:
+            input_f = open(input_fname, 'r')
+        output_f = open(output_fname, 'w')
 
-        for cmd_template in cmd_templates:
-            cmd = Template(cmd_template).substitute(python_cmd=python_cmd,
-                                                    risk_file_option=risk_file_option,
-                                                    bus_risk=bus_risk,
-                                                    departed_dev_option=departed_dev_option,
-                                                    output_dir=output_dir).split(' ')
-            cmd_p = Popen(cmd, stdin=stdin_f, stdout=output_f)
+        for opt_args in opts_args:
+            cmd = [x for x in ' '.join([python_cmd, output_pyfile, opt_args]).split(' ') if x]
+            if verbose:
+                print >> sys.stderr, "Input file is: %s" % input_fname
+                print >> sys.stderr, "Output file is: %s" % output_fname
+                print >> sys.stderr, cmd
+            cmd_p = Popen(cmd, stdin=input_f, stdout=output_f)
             cmd_p.communicate()
-
-        if stdin_f:
-            stdin_f.close()
+            
+        if input_f:
+            input_f.close()
         if output_f:
             output_f.close()
 
-def main(paths_projects, options):
-    # values for command subs...
-    python_cmd = '/usr/bin/env python'
-
+def main(python_cmd, paths_projects, options):
     output_dir = os.path.abspath(options.output or 'output')
     try:
         os.mkdir(output_dir)
@@ -74,15 +76,39 @@ def main(paths_projects, options):
     if options.departed_dev_file:
         departed_dev_option = '-d %s' % options.departed_dev_file
 
+    interesting_file_option = ' '.join(["-i %s" % i for i in options.interesting])
+    not_interesting_file_option = ' '.join(["-n %s" % n for n in options.not_interesting])
+    case_sensitive_option = ''
+    if options.case_sensitive:
+        case_sensitive_option = '-s'
+
     # commands to chain together
     cmd_ts = []
-    cmd_ts.append((['${python_cmd} gen_file_stats.py %s' % path_project for path_project in paths_projects], '__file_stats.txt'))
-    cmd_ts.append(('${python_cmd} calc_file_knowledge_totals.py', '__file_knowledge_totals.txt'))
-    cmd_ts.append(('${python_cmd} estimate_unique_knowledge.py ${departed_dev_option}', '__unique_knowledge.txt'))
-    cmd_ts.append(('${python_cmd} estimate_file_risk.py -b ${bus_risk} ${risk_file_option}', '__estimated_risk.txt'))
-    cmd_ts.append(('${python_cmd} summarize.py ${output_dir}', None))
+    cmd_ts.append([None, 'gen_file_stats.py',
+                   ['${interesting_file_option} ${not_interesting_file_option} ${case_sensitive_option} %s' % path_project \
+                    for path_project in paths_projects]])
+    cmd_ts.append(['gen_file_stats.py', 'calc_file_knowledge_totals.py'])
+    cmd_ts.append(['calc_file_knowledge_totals.py', 'estimate_unique_knowledge.py', '${departed_dev_option}'])
+    cmd_ts.append(['estimate_unique_knowledge.py', 'estimate_file_risk.py', '-b ${bus_risk} ${risk_file_option}'])
+    cmd_ts.append(['estimate_file_risk.py', 'summarize.py', '${output_dir}'])
+                  
+    for cmd_t in cmd_ts:
+        if len(cmd_t) > 2:
+            opts_args = cmd_t[2]
+            if not isinstance(opts_args, list):
+                opts_args = [opts_args]
+            opts_args = [Template(s).substitute(python_cmd=python_cmd,
+                                                risk_file_option=risk_file_option,
+                                                bus_risk=options.bus_risk,
+                                                departed_dev_option=departed_dev_option,
+                                                interesting_file_option=interesting_file_option,
+                                                not_interesting_file_option=not_interesting_file_option,
+                                                case_sensitive_option=case_sensitive_option,
+                                                output_dir=output_dir) \
+                         for s in opts_args]
+            cmd_t[2] = opts_args
 
-    run_chained(cmd_ts, python_cmd, risk_file_option, options.bus_risk, departed_dev_option, output_dir)
+    run_chained(cmd_ts, python_cmd, output_dir, options.verbose)
     
 if __name__ == '__main__':
     usage = """usage: %prog [options] [git_controlled_path1[=project_name1], git_controlled_path2[=project_name2],...]
@@ -103,6 +129,14 @@ if __name__ == '__main__':
                       help='File of dev=float lines (e.g. ejorgensen=0.4) with custom bus risks for devs')
     parser.add_option('-d', '--departed-dev-file', dest='departed_dev_file', metavar='FILE',
                       help='File listing departed devs, one per line')
+    parser.add_option('-i', '--interesting', metavar="REGEXP", dest='interesting', action='append',
+                      help='Regular expression to determine which files should be included in calculations.  ' + \
+                      'May be repeated, any match is sufficient to indicate interest. ' + \
+                      'Defaults are \.java$ \.cs$ \.python$ \.c$ \.cpp$ \.h$ \.hpp$ \.pl$ \.rb$', default=[])
+    parser.add_option('-n', '--not-interesting', metavar="REGEXP", dest="not_interesting", action='append', default=[],
+                      help="Regular expression to override interesting files.  May be repeated, any match is enough to squelch interest.")
+    parser.add_option('-s', '--case-sensitive', dest='case_sensitive', action='store_true', default=False,
+                      help='Use case-sensitive regepxs when finding interesting / uninteresting files (defaults to case-insensitive)')
     parser.add_option('-o', '--output', dest='output', metavar='DIRNAME', default='output',
                       help='Output directory for data files and html summary (defaults to "output"), error if already exists without -c')
     parser.add_option('-p', '--projects-file', dest='projects_file', metavar='FILE',
@@ -111,6 +145,7 @@ if __name__ == '__main__':
                       'the last directory name in the path)')
     parser.add_option('-c', '--continue-last', dest='continue_last', default=False, action="store_true",
                       help="Continue last run, using existing output files and recreating missing.")
+    parser.add_option('-v', '--verbose', dest='verbose', default=False, action="store_true", help="Print debugging info")
 
     options, paths_projects = parser.parse_args()
 
@@ -121,4 +156,5 @@ if __name__ == '__main__':
     if not paths_projects:
         parser.error('No paths/projects!  You must either specify paths/projects on the command line and/or in a file with the -p option.')
     
-    main(paths_projects, options)
+    main('/usr/bin/env python', paths_projects, options)
+ 
